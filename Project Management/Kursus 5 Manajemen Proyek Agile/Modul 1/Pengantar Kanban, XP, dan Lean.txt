Hai lagi. Ada banyak metodologi tangkas populer yang masih ada dari tahun 90-an, ketika Agile ditemukan. Metodologi ini berbagi nilai dan prinsip yang gesit tetapi memiliki praktik dan aplikasi yang sangat spesifik. Dalam video ini, saya akan menyentuh beberapa yang paling populer selain scrum, yang kami bahas di video terakhir. Salah satu favorit pribadi saya adalah Kanban. Ini adalah metodologi yang dapat diterapkan dengan cara yang sangat sederhana, atau dapat digunakan untuk mendorong seluruh proyek. Nama Kanban berasal dari dua kata Jepang. “Kan” berarti “tanda,” dan “larangan” berarti “papan.” Anda mungkin sudah menggunakan papan Kanban karena ini adalah fitur paling terkenal yang di adopsi oleh mayoritas penggemar Agile. Alasan Kanban sangat populer adalah karena memberikan masukan visual transparan kepada semua orang yang mungkin tertarik dengan status pekerjaan yang sedang berlangsung. P@@ apan atau bagan Kanban menampilkan kemajuan proyek seperti yang sedang berjalan dan selesai. Juga, hanya saja, ada alat perangkat lunak yang membuat papan Kanban digital untuk Anda. Metode Kanban memastikan bahwa tim proyek hanya menerima jumlah pekerjaan yang sedang berlangsung secara berkelanjutan. Ini berarti jumlah tugas yang sedang berjalan terbatas pada apa yang sebenarnya dapat ditangani tim selama jangka waktu tertentu. Ini disebut batas kemajuan kerja, atau batas WIP. Batas WIP ditentukan oleh tim. Ini adalah cerminan dari ketangkasan karena tim dapat mengatur diri sendiri dan diberdayakan, dan mereka beroperasi dengan kecepatan yang berkelanjutan. Anggota tim menambahkan tugas baru untuk diselesaikan hanya setelah mereka menyelesaikan tugas sebelumnya dan berada di bawah batas WIP. Pendekatan ini berarti bahwa begitu tugas mulai dikerjakan, itu menjadi prioritas bagi seluruh tim untuk menyelesaikannya. Dengan fokus pada pekerjaan yang lebih sedikit, pekerjaan selesai lebih cepat. Tujuan mencoba memaksimalkan efisiensi ini disebut aliran, dan merupakan prinsip inti Kanban. Metodologi Agile lainnya adalah pemrograman ekstrim atau XP. Itu dinamai demikian karena mengambil kegiatan pengembangan perangkat lunak tradisional ke tingkat yang ekstrim. Tapi saya juga percaya itu karena muncul bersamaan dengan olahraga ekstrim seperti snowboarding. XP adalah salah satu favorit pribadi saya. Itu adalah metodologi Agile pertama yang saya perkenalkan pada hari-hari saya bekerja pada beberapa ponsel asli di Qualcomm: perusahaan di balik teknologi radio yang kita semua gunakan di ponsel kita hari ini. Sejak XP keluar dari industri perangkat lunak, ini mengacu pada istilah dan aktivitas perangkat lunak tertentu seperti coding dan pemrograman , tetapi metode XP dapat digunakan di banyak lingkungan non-perangkat lunak juga. Metodologi XP bertujuan untuk meningkatkan kualitas produk dan kemampuan untuk menanggapi perubahan kebutuhan pelanggan. Ini dilakukan dengan mengambil praktik terbaik untuk proses pengembangan ke tingkat yang ekstrim. Misalnya, salah satu praktik terbaik adalah gagasan pengujian pengembangan pertama. Ini berarti menguji bagian-bagian produk sebelum membangunnya secara penuh. Seringkali hanya fitur yang lebih besar yang diuji, yang masih bagus tetapi berarti beberapa detail mungkin terlewatkan. XP membawa praktik ini ke ekstrem dengan menemukan cara untuk menguji fitur produk yang lebih banyak dan lebih kecil untuk mendapatkan lebih banyak masukan. Ada empat aktivitas dasar yang dilakukan selama proses pengembangan produk yang coba ditingkatkan oleh metode XP. Merancang: dalam pengembangan perangkat lunak, di sinilah Anda menulis dokumen desain yang menjelaskan bagian-bagian kode atau instruksi untuk produk dan bagaimana fungsinya. Di lingkungan non-perangkat lunak. Ini akan menggambarkan berbagai bagian dan bagian untuk apa pun yang Anda coba sampaikan. Misalnya, jika Anda mengirimkan kampanye iklan, mungkin bagian utamanya adalah karya seni, salinan, dan iklan berdasarkan rencana. XP ingin memastikan bahwa semua bagian produk akan cocok bersama dengan benar. Jadi itu menekankan kesederhanaan. Mulailah dengan desain sederhana untuk memenuhi persyaratan paling dasar dan penting. Desain sederhana juga membutuhkan lebih sedikit waktu untuk menyelesaikannya. Setelah model dasar dirancang dan telah diuji, maka Anda dapat berpikir untuk menambahkan fitur lain. Coding: kode adalah bahasa yang digunakan untuk menulis program perangkat lunak. Ini adalah instruksi yang memberi tahu komputer apa yang harus dilakukan. Dalam pengembangan software menulis kode yang jelas sangat penting. Sama seperti tulisan yang jelas sangat penting dalam situasi apa pun di mana Anda ingin dipahami. XP menuntut kode yang jelas dan ringkas, sehingga orang lain dapat dengan mudah membaca dan memahami program. Ini membuatnya lebih mudah untuk memecahkan masalah dan menemukan solusi. Dalam lingkungan non software, kode akan mirip dengan menulis proses atau instruksi yang jelas dan ringkas tentang cara membangun atau menggunakan produk Anda. Pengujian: seperti yang saya jelaskan sebelumnya berarti memeriksa produk untuk kekurangan sehingga tidak berakhir di produk akhir. Di XP, lebih banyak lebih baik. Jadi jika sedikit pengujian dapat menghilangkan beberapa kekurangan, banyak pengujian akan menghilangkan lebih banyak lagi. Tujuannya adalah untuk menguji dan menghilangkan kekurangan apa pun dalam fitur sebelum membangunnya dan melanjutkannya. Pengujian juga berarti memeriksa untuk memastikan fitur produk, memenuhi persyaratan pelanggan. Yang menuntun kita untuk mendengarkan. Yaitu tentang mendengarkan pelanggan dan memastikan bahwa persyaratan diintegrasikan ke dalam produk. Ini berkaitan dengan gesit dalam cara menghargai kolaborasi pelanggan, komunikasi yang sering, dan masukan reguler. XP menampilkan beberapa praktik inovatif lainnya yang digunakan di banyak tim tangkas, terlepas dari metodologi spesifik yang digunakan. Pertama, ada pemrograman pasangan , yaitu ketika dua anggota tim Bekerja bersama pada saat yang sama pada satu tugas. Biasanya ini dilakukan di lokasi fisik yang sama, tetapi dengan penggunaan alat kolaborasi digital, ini dapat terjadi dari jarak jauh juga. Praktik lain adalah integrasi berkelanjutan dan refactoring berkelanjutan. Ini adalah praktik menggabungkan perubahan produk menjadi versi bersama beberapa kali sehari untuk mendapatkan masukan cepat tentang kualitas kode atau produk. Lalu ada menghindari desain besar di depan. Ini berkaitan dengan desain dan berarti desain harus cukup untuk memulai dan harus terus ditingkatkan seiring perkembangan produk. Dan akhirnya, ada tes tulis, bukan persyaratan. Ini berarti bahwa alih-alih menulis dokumen persyaratan produk dan kemudian menulis rencana pengujian. R@@ encana pengujian Anda dapat melayani dua tujuan dengan A. memberi tahu tim apa yang harus dibangun, dan B. membandingkan apa yang mereka bangun dengan apa yang seharusnya dibangun. Oke, jadi kita punya Scrum, Kanban dan XP. Mari kita jelajahi satu lagi. Bagi Anda yang mengambil kursus sebelumnya dalam program ini, Anda sudah belajar sedikit tentang metodologi akhir ini, yang disebut Lean. Dalam konteks Lean 6 Sigma. Metodologi Lean terdiri dari lima prinsip yang berfungsi sebagai resep untuk meningkatkan hasil proyek. Mereka adalah: menentukan nilai, memetakan aliran nilai, menciptakan aliran, membangun tarikan dan mengejar kesempurnaan. Mari kita pecahkan ini. Mendefinisikan nilai berarti mengidentifikasi dan berfokus pada apa yang diinginkan pelanggan dan memasukkan pelanggan dalam proses. Nilai produk adalah jumlah dari semua hal yang diinginkan pelanggan. Peta aliran nilai, berarti memetakan proses atau aliran, termasuk semua langkah yang terlibat dalam menghasilkan nilai bagi pelanggan. Ini juga berarti menantang langkah apa pun yang dapat dianggap boros atau tidak perlu. Menciptakan aliran, berarti memastikan produk mengalir melalui aliran nilai secara efisien, terus menghilangkan limbah sepanjang siklus. Bekerja untuk menghilangkan gangguan, penundaan, dan hambatan pada aliran kerja. Tetapkan tarikan: pikirkan meminta seseorang untuk menarik sesuatu dari rak. Anda ingin memastikan pelanggan menarik produk atau memin tanya di seluruh aliran nilai. Mereka mungkin menarik atau meminta fitur dan pengiriman tambahan. Idenya adalah untuk membuat proses Anda semulus mungkin sehingga pelanggan dapat menarik produk kapan saja dan Anda akan dapat menyajikan apa yang telah Anda kerjakan atau menambahkan permintaan fitur. Akhirnya, ada mengejar kesempurnaan. Ini berarti mendorong tim Anda untuk terus meningkatkan empat langkah proses pertama. Jadi bagaimana hubungannya dengan Agile? Nah, Agile muncul setelah Lean, dan para penemu Agile terinspirasi untuk menerapkan prinsip-prinsip manufaktur Lean untuk pengembangan perangkat lunak. Seperti Agile, Lean adalah seperangkat prinsip dan sistem nilai. Banyak perbedaan sebenarnya hanya dalam kata-katanya. Luar biasa, sekarang kita tahu lebih banyak tentang beberapa metodologi lain yang dianggap Agile. Ada beberapa lagi, tetapi kenyataannya adalah bahwa banyak tim berevolusi dan memadukan metode untuk menciptakan alat dan proses yang paling sesuai untuk mereka. Kami akan membahas lebih lanjut tentang cara melakukan ini, memadukan dalam video berikutnya.